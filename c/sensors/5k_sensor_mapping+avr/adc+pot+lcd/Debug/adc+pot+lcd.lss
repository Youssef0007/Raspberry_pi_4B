
adc+pot+lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000d86  00000e1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007c  0080007c  00000e36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000254b  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  00003541  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f1  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b4  00000000  00000000  000044dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00004790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001031  00000000  00000000  00004b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00005bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 c2 00 	jmp	0x184	; 0x184 <__ctors_end>
   4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
   c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  34:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  38:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
  54:	90 02       	muls	r25, r16
  56:	94 02       	muls	r25, r20
  58:	98 02       	muls	r25, r24
  5a:	9c 02       	muls	r25, r28
  5c:	a0 02       	muls	r26, r16
  5e:	a4 02       	muls	r26, r20
  60:	a8 02       	muls	r26, r24
  62:	ac 02       	muls	r26, r28
  64:	bc 02       	muls	r27, r28
  66:	d9 02       	muls	r29, r25
  68:	f6 02       	muls	r31, r22
  6a:	13 03       	mulsu	r17, r19
  6c:	2f 03       	fmul	r18, r23
  6e:	2f 03       	fmul	r18, r23
  70:	2f 03       	fmul	r18, r23
  72:	2f 03       	fmul	r18, r23
  74:	2f 03       	fmul	r18, r23
  76:	2f 03       	fmul	r18, r23
  78:	2f 03       	fmul	r18, r23
  7a:	2f 03       	fmul	r18, r23
  7c:	2f 03       	fmul	r18, r23
  7e:	2f 03       	fmul	r18, r23
  80:	2f 03       	fmul	r18, r23
  82:	2f 03       	fmul	r18, r23
  84:	2f 03       	fmul	r18, r23
  86:	2f 03       	fmul	r18, r23
  88:	2f 03       	fmul	r18, r23
  8a:	2f 03       	fmul	r18, r23
  8c:	2f 03       	fmul	r18, r23
  8e:	2f 03       	fmul	r18, r23
  90:	2f 03       	fmul	r18, r23
  92:	2f 03       	fmul	r18, r23
  94:	2f 03       	fmul	r18, r23
  96:	2f 03       	fmul	r18, r23
  98:	2f 03       	fmul	r18, r23
  9a:	2f 03       	fmul	r18, r23
  9c:	2f 03       	fmul	r18, r23
  9e:	2f 03       	fmul	r18, r23
  a0:	2f 03       	fmul	r18, r23
  a2:	2f 03       	fmul	r18, r23
  a4:	bc 02       	muls	r27, r28
  a6:	d9 02       	muls	r29, r25
  a8:	f6 02       	muls	r31, r22
  aa:	13 03       	mulsu	r17, r19
  ac:	3c 03       	fmul	r19, r20
  ae:	59 03       	fmul	r21, r17
  b0:	76 03       	mulsu	r23, r22
  b2:	93 03       	fmuls	r17, r19
  b4:	af 03       	fmulsu	r18, r23
  b6:	af 03       	fmulsu	r18, r23
  b8:	af 03       	fmulsu	r18, r23
  ba:	af 03       	fmulsu	r18, r23
  bc:	af 03       	fmulsu	r18, r23
  be:	af 03       	fmulsu	r18, r23
  c0:	af 03       	fmulsu	r18, r23
  c2:	af 03       	fmulsu	r18, r23
  c4:	af 03       	fmulsu	r18, r23
  c6:	af 03       	fmulsu	r18, r23
  c8:	af 03       	fmulsu	r18, r23
  ca:	af 03       	fmulsu	r18, r23
  cc:	af 03       	fmulsu	r18, r23
  ce:	af 03       	fmulsu	r18, r23
  d0:	af 03       	fmulsu	r18, r23
  d2:	af 03       	fmulsu	r18, r23
  d4:	af 03       	fmulsu	r18, r23
  d6:	af 03       	fmulsu	r18, r23
  d8:	af 03       	fmulsu	r18, r23
  da:	af 03       	fmulsu	r18, r23
  dc:	af 03       	fmulsu	r18, r23
  de:	af 03       	fmulsu	r18, r23
  e0:	af 03       	fmulsu	r18, r23
  e2:	af 03       	fmulsu	r18, r23
  e4:	af 03       	fmulsu	r18, r23
  e6:	af 03       	fmulsu	r18, r23
  e8:	af 03       	fmulsu	r18, r23
  ea:	af 03       	fmulsu	r18, r23
  ec:	3c 03       	fmul	r19, r20
  ee:	59 03       	fmul	r21, r17
  f0:	76 03       	mulsu	r23, r22
  f2:	93 03       	fmuls	r17, r19
  f4:	bf 03       	fmulsu	r19, r23
  f6:	c6 03       	fmuls	r20, r22
  f8:	cd 03       	fmulsu	r20, r21
  fa:	d4 03       	fmuls	r21, r20
  fc:	05 04       	cpc	r0, r5
  fe:	05 04       	cpc	r0, r5
 100:	05 04       	cpc	r0, r5
 102:	05 04       	cpc	r0, r5
 104:	05 04       	cpc	r0, r5
 106:	05 04       	cpc	r0, r5
 108:	05 04       	cpc	r0, r5
 10a:	05 04       	cpc	r0, r5
 10c:	05 04       	cpc	r0, r5
 10e:	05 04       	cpc	r0, r5
 110:	05 04       	cpc	r0, r5
 112:	05 04       	cpc	r0, r5
 114:	05 04       	cpc	r0, r5
 116:	05 04       	cpc	r0, r5
 118:	05 04       	cpc	r0, r5
 11a:	05 04       	cpc	r0, r5
 11c:	05 04       	cpc	r0, r5
 11e:	05 04       	cpc	r0, r5
 120:	05 04       	cpc	r0, r5
 122:	05 04       	cpc	r0, r5
 124:	05 04       	cpc	r0, r5
 126:	05 04       	cpc	r0, r5
 128:	05 04       	cpc	r0, r5
 12a:	05 04       	cpc	r0, r5
 12c:	05 04       	cpc	r0, r5
 12e:	05 04       	cpc	r0, r5
 130:	05 04       	cpc	r0, r5
 132:	05 04       	cpc	r0, r5
 134:	bf 03       	fmulsu	r19, r23
 136:	c6 03       	fmuls	r20, r22
 138:	cd 03       	fmulsu	r20, r21
 13a:	d4 03       	fmuls	r21, r20
 13c:	ea 03       	fmulsu	r22, r18
 13e:	f1 03       	fmuls	r23, r17
 140:	f8 03       	fmulsu	r23, r16
 142:	ff 03       	fmulsu	r23, r23
 144:	05 04       	cpc	r0, r5
 146:	05 04       	cpc	r0, r5
 148:	05 04       	cpc	r0, r5
 14a:	05 04       	cpc	r0, r5
 14c:	05 04       	cpc	r0, r5
 14e:	05 04       	cpc	r0, r5
 150:	05 04       	cpc	r0, r5
 152:	05 04       	cpc	r0, r5
 154:	05 04       	cpc	r0, r5
 156:	05 04       	cpc	r0, r5
 158:	05 04       	cpc	r0, r5
 15a:	05 04       	cpc	r0, r5
 15c:	05 04       	cpc	r0, r5
 15e:	05 04       	cpc	r0, r5
 160:	05 04       	cpc	r0, r5
 162:	05 04       	cpc	r0, r5
 164:	05 04       	cpc	r0, r5
 166:	05 04       	cpc	r0, r5
 168:	05 04       	cpc	r0, r5
 16a:	05 04       	cpc	r0, r5
 16c:	05 04       	cpc	r0, r5
 16e:	05 04       	cpc	r0, r5
 170:	05 04       	cpc	r0, r5
 172:	05 04       	cpc	r0, r5
 174:	05 04       	cpc	r0, r5
 176:	05 04       	cpc	r0, r5
 178:	05 04       	cpc	r0, r5
 17a:	05 04       	cpc	r0, r5
 17c:	ea 03       	fmulsu	r22, r18
 17e:	f1 03       	fmuls	r23, r17
 180:	f8 03       	fmulsu	r23, r16
 182:	ff 03       	fmulsu	r23, r23

00000184 <__ctors_end>:
 184:	11 24       	eor	r1, r1
 186:	1f be       	out	0x3f, r1	; 63
 188:	cf e5       	ldi	r28, 0x5F	; 95
 18a:	d8 e0       	ldi	r29, 0x08	; 8
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	cd bf       	out	0x3d, r28	; 61

00000190 <__do_copy_data>:
 190:	10 e0       	ldi	r17, 0x00	; 0
 192:	a0 e6       	ldi	r26, 0x60	; 96
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e6 e8       	ldi	r30, 0x86	; 134
 198:	fd e0       	ldi	r31, 0x0D	; 13
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x10>
 19c:	05 90       	lpm	r0, Z+
 19e:	0d 92       	st	X+, r0
 1a0:	ac 37       	cpi	r26, 0x7C	; 124
 1a2:	b1 07       	cpc	r27, r17
 1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0xc>

000001a6 <__do_clear_bss>:
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	ac e7       	ldi	r26, 0x7C	; 124
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
 1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
 1b0:	af 37       	cpi	r26, 0x7F	; 127
 1b2:	b2 07       	cpc	r27, r18
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
 1b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
 1ba:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <_exit>

000001be <__bad_interrupt>:
 1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <main>:
unsigned short dist  = 0;
unsigned char serial;

int main(void)
{
	LCD_init();
 1c2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <LCD_init>
	ADC_init();
 1c6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_init>
	SPI_slave_init();
 1ca:	0e 94 28 05 	call	0xa50	; 0xa50 <SPI_slave_init>
	UART_init(9600);
 1ce:	60 e8       	ldi	r22, 0x80	; 128
 1d0:	75 e2       	ldi	r23, 0x25	; 37
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 34 05 	call	0xa68	; 0xa68 <UART_init>
	
	LCD_send_string("Distance : ");
 1da:	80 e6       	ldi	r24, 0x60	; 96
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <LCD_send_string>
	
    while(1)
    {
		ADC_pin(pot_pin);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 87 02 	call	0x50e	; 0x50e <ADC_pin>
		dist = 0.45 * ADC_read();
 1e8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ADC_read>
 1ec:	bc 01       	movw	r22, r24
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 99 05 	call	0xb32	; 0xb32 <__floatunsisf>
 1f6:	26 e6       	ldi	r18, 0x66	; 102
 1f8:	36 e6       	ldi	r19, 0x66	; 102
 1fa:	46 ee       	ldi	r20, 0xE6	; 230
 1fc:	5e e3       	ldi	r21, 0x3E	; 62
 1fe:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__mulsf3>
 202:	0e 94 6d 05 	call	0xada	; 0xada <__fixunssfsi>
 206:	70 93 7d 00 	sts	0x007D, r23
 20a:	60 93 7c 00 	sts	0x007C, r22
		
		UART_send_string("Distance = ");
 20e:	8c e6       	ldi	r24, 0x6C	; 108
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 5e 05 	call	0xabc	; 0xabc <UART_send_string>
		serial = (((dist/100)%10) + 48);
 216:	20 91 7c 00 	lds	r18, 0x007C
 21a:	30 91 7d 00 	lds	r19, 0x007D
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	ab e7       	ldi	r26, 0x7B	; 123
 228:	b4 e1       	ldi	r27, 0x14	; 20
 22a:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 22e:	ac 01       	movw	r20, r24
 230:	56 95       	lsr	r21
 232:	47 95       	ror	r20
 234:	9a 01       	movw	r18, r20
 236:	ad ec       	ldi	r26, 0xCD	; 205
 238:	bc ec       	ldi	r27, 0xCC	; 204
 23a:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	96 95       	lsr	r25
 244:	87 95       	ror	r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	9c 01       	movw	r18, r24
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	82 0f       	add	r24, r18
 25e:	93 1f       	adc	r25, r19
 260:	48 1b       	sub	r20, r24
 262:	59 0b       	sbc	r21, r25
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	84 0f       	add	r24, r20
 268:	80 93 7e 00 	sts	0x007E, r24
		UART_send_char (serial);
 26c:	0e 94 5a 05 	call	0xab4	; 0xab4 <UART_send_char>
		serial = (((dist/10)%10) + 48);
 270:	20 91 7c 00 	lds	r18, 0x007C
 274:	30 91 7d 00 	lds	r19, 0x007D
 278:	ad ec       	ldi	r26, 0xCD	; 205
 27a:	bc ec       	ldi	r27, 0xCC	; 204
 27c:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 280:	ac 01       	movw	r20, r24
 282:	56 95       	lsr	r21
 284:	47 95       	ror	r20
 286:	56 95       	lsr	r21
 288:	47 95       	ror	r20
 28a:	56 95       	lsr	r21
 28c:	47 95       	ror	r20
 28e:	9a 01       	movw	r18, r20
 290:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 294:	96 95       	lsr	r25
 296:	87 95       	ror	r24
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	9c 01       	movw	r18, r24
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	82 0f       	add	r24, r18
 2b4:	93 1f       	adc	r25, r19
 2b6:	48 1b       	sub	r20, r24
 2b8:	59 0b       	sbc	r21, r25
 2ba:	80 e3       	ldi	r24, 0x30	; 48
 2bc:	84 0f       	add	r24, r20
 2be:	80 93 7e 00 	sts	0x007E, r24
		UART_send_char (serial);
 2c2:	0e 94 5a 05 	call	0xab4	; 0xab4 <UART_send_char>
		serial = ((dist%10) + 48);
 2c6:	40 91 7c 00 	lds	r20, 0x007C
 2ca:	50 91 7d 00 	lds	r21, 0x007D
 2ce:	9a 01       	movw	r18, r20
 2d0:	ad ec       	ldi	r26, 0xCD	; 205
 2d2:	bc ec       	ldi	r27, 0xCC	; 204
 2d4:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	9c 01       	movw	r18, r24
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	48 1b       	sub	r20, r24
 2fc:	59 0b       	sbc	r21, r25
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	84 0f       	add	r24, r20
 302:	80 93 7e 00 	sts	0x007E, r24
		UART_send_char (serial);
 306:	0e 94 5a 05 	call	0xab4	; 0xab4 <UART_send_char>
		UART_send_string(" mm");
 30a:	88 e7       	ldi	r24, 0x78	; 120
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 5e 05 	call	0xabc	; 0xabc <UART_send_string>
		UART_send_char(0x0D);           //Send new line to the terminal. 
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	0e 94 5a 05 	call	0xab4	; 0xab4 <UART_send_char>
		
		if (dist < 10)
 318:	80 91 7c 00 	lds	r24, 0x007C
 31c:	90 91 7d 00 	lds	r25, 0x007D
 320:	8a 30       	cpi	r24, 0x0A	; 10
 322:	91 05       	cpc	r25, r1
 324:	a0 f5       	brcc	.+104    	; 0x38e <main+0x1cc>
		{
			LCD_move_cursor (1, 15);
 326:	6f e0       	ldi	r22, 0x0F	; 15
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 09 05 	call	0xa12	; 0xa12 <LCD_move_cursor>
			LCD_send_char(' ');
 32e:	80 e2       	ldi	r24, 0x20	; 32
 330:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_send_char(' ');
 334:	80 e2       	ldi	r24, 0x20	; 32
 336:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_move_cursor (1, 12);
 33a:	6c e0       	ldi	r22, 0x0C	; 12
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 09 05 	call	0xa12	; 0xa12 <LCD_move_cursor>
			LCD_send_char ((dist%10) + 48);
 342:	40 91 7c 00 	lds	r20, 0x007C
 346:	50 91 7d 00 	lds	r21, 0x007D
 34a:	9a 01       	movw	r18, r20
 34c:	ad ec       	ldi	r26, 0xCD	; 205
 34e:	bc ec       	ldi	r27, 0xCC	; 204
 350:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	9c 01       	movw	r18, r24
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	82 0f       	add	r24, r18
 374:	93 1f       	adc	r25, r19
 376:	9a 01       	movw	r18, r20
 378:	28 1b       	sub	r18, r24
 37a:	39 0b       	sbc	r19, r25
 37c:	c9 01       	movw	r24, r18
 37e:	80 5d       	subi	r24, 0xD0	; 208
 380:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_send_string ("mm");
 384:	89 e7       	ldi	r24, 0x79	; 121
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <LCD_send_string>
 38c:	2a cf       	rjmp	.-428    	; 0x1e2 <main+0x20>
		}
		else if ((dist >= 10) && (dist < 100))
 38e:	9c 01       	movw	r18, r24
 390:	2a 50       	subi	r18, 0x0A	; 10
 392:	31 09       	sbc	r19, r1
 394:	2a 35       	cpi	r18, 0x5A	; 90
 396:	31 05       	cpc	r19, r1
 398:	08 f0       	brcs	.+2      	; 0x39c <main+0x1da>
 39a:	42 c0       	rjmp	.+132    	; 0x420 <main+0x25e>
		{
			LCD_move_cursor (1, 16);
 39c:	60 e1       	ldi	r22, 0x10	; 16
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 09 05 	call	0xa12	; 0xa12 <LCD_move_cursor>
			LCD_send_char(' ');
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_move_cursor (1, 12);
 3aa:	6c e0       	ldi	r22, 0x0C	; 12
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 09 05 	call	0xa12	; 0xa12 <LCD_move_cursor>
			LCD_send_char ((dist/10) + 48);
 3b2:	20 91 7c 00 	lds	r18, 0x007C
 3b6:	30 91 7d 00 	lds	r19, 0x007D
 3ba:	ad ec       	ldi	r26, 0xCD	; 205
 3bc:	bc ec       	ldi	r27, 0xCC	; 204
 3be:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 3c2:	96 95       	lsr	r25
 3c4:	87 95       	ror	r24
 3c6:	96 95       	lsr	r25
 3c8:	87 95       	ror	r24
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	80 5d       	subi	r24, 0xD0	; 208
 3d0:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_send_char ((dist%10) + 48);
 3d4:	40 91 7c 00 	lds	r20, 0x007C
 3d8:	50 91 7d 00 	lds	r21, 0x007D
 3dc:	9a 01       	movw	r18, r20
 3de:	ad ec       	ldi	r26, 0xCD	; 205
 3e0:	bc ec       	ldi	r27, 0xCC	; 204
 3e2:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	9c 01       	movw	r18, r24
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	82 0f       	add	r24, r18
 406:	93 1f       	adc	r25, r19
 408:	9a 01       	movw	r18, r20
 40a:	28 1b       	sub	r18, r24
 40c:	39 0b       	sbc	r19, r25
 40e:	c9 01       	movw	r24, r18
 410:	80 5d       	subi	r24, 0xD0	; 208
 412:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_send_string ("mm");
 416:	89 e7       	ldi	r24, 0x79	; 121
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <LCD_send_string>
 41e:	e1 ce       	rjmp	.-574    	; 0x1e2 <main+0x20>
		}
		else if (dist >= 100)
 420:	84 36       	cpi	r24, 0x64	; 100
 422:	91 05       	cpc	r25, r1
 424:	08 f4       	brcc	.+2      	; 0x428 <main+0x266>
 426:	dd ce       	rjmp	.-582    	; 0x1e2 <main+0x20>
		{
			LCD_move_cursor (1, 12);
 428:	6c e0       	ldi	r22, 0x0C	; 12
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 09 05 	call	0xa12	; 0xa12 <LCD_move_cursor>
			LCD_send_char ((dist/100) + 48);
 430:	20 91 7c 00 	lds	r18, 0x007C
 434:	30 91 7d 00 	lds	r19, 0x007D
 438:	36 95       	lsr	r19
 43a:	27 95       	ror	r18
 43c:	36 95       	lsr	r19
 43e:	27 95       	ror	r18
 440:	ab e7       	ldi	r26, 0x7B	; 123
 442:	b4 e1       	ldi	r27, 0x14	; 20
 444:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	80 5d       	subi	r24, 0xD0	; 208
 44e:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_send_char (((dist/10)%10) + 48);
 452:	20 91 7c 00 	lds	r18, 0x007C
 456:	30 91 7d 00 	lds	r19, 0x007D
 45a:	ad ec       	ldi	r26, 0xCD	; 205
 45c:	bc ec       	ldi	r27, 0xCC	; 204
 45e:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 462:	ac 01       	movw	r20, r24
 464:	56 95       	lsr	r21
 466:	47 95       	ror	r20
 468:	56 95       	lsr	r21
 46a:	47 95       	ror	r20
 46c:	56 95       	lsr	r21
 46e:	47 95       	ror	r20
 470:	9a 01       	movw	r18, r20
 472:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	9c 01       	movw	r18, r24
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	82 0f       	add	r24, r18
 496:	93 1f       	adc	r25, r19
 498:	9a 01       	movw	r18, r20
 49a:	28 1b       	sub	r18, r24
 49c:	39 0b       	sbc	r19, r25
 49e:	c9 01       	movw	r24, r18
 4a0:	80 5d       	subi	r24, 0xD0	; 208
 4a2:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_send_char ((dist%10) + 48);
 4a6:	40 91 7c 00 	lds	r20, 0x007C
 4aa:	50 91 7d 00 	lds	r21, 0x007D
 4ae:	9a 01       	movw	r18, r20
 4b0:	ad ec       	ldi	r26, 0xCD	; 205
 4b2:	bc ec       	ldi	r27, 0xCC	; 204
 4b4:	0e 94 b2 06 	call	0xd64	; 0xd64 <__umulhisi3>
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	9c 01       	movw	r18, r24
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	82 0f       	add	r24, r18
 4d8:	93 1f       	adc	r25, r19
 4da:	9a 01       	movw	r18, r20
 4dc:	28 1b       	sub	r18, r24
 4de:	39 0b       	sbc	r19, r25
 4e0:	c9 01       	movw	r24, r18
 4e2:	80 5d       	subi	r24, 0xD0	; 208
 4e4:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>
			LCD_send_string ("mm");
 4e8:	89 e7       	ldi	r24, 0x79	; 121
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <LCD_send_string>
 4f0:	78 ce       	rjmp	.-784    	; 0x1e2 <main+0x20>

000004f2 <ADC_init>:
#include "my_macros.h"
#include "ADC.h"

void ADC_init ()
{
  SET_BIT (ADMUX, REFS0);    //Configure Volt as 5V + Cap. @AREF pin.
 4f2:	3e 9a       	sbi	0x07, 6	; 7
  //SET_BIT (ADMUX, REFS1);
  SET_BIT (ADCSRA, ADEN);    //Enable the ADC Bit.
 4f4:	37 9a       	sbi	0x06, 7	; 6
  SET_BIT (ADCSRA, ADPS0);
  CLR_BIT (ADCSRA, ADPS1);
  SET_BIT (ADCSRA, ADPS2);

  #elif defined Div_factor_64
  CLR_BIT (ADCSRA, ADPS0);
 4f6:	30 98       	cbi	0x06, 0	; 6
  SET_BIT (ADCSRA, ADPS1);
 4f8:	31 9a       	sbi	0x06, 1	; 6
  SET_BIT (ADCSRA, ADPS2);
 4fa:	32 9a       	sbi	0x06, 2	; 6
 4fc:	08 95       	ret

000004fe <ADC_read>:

unsigned short ADC_read ()
{
	unsigned short ADC_val;             //Declaring the Converted value from ADC Holder.
	
	SET_BIT (ADCSRA, ADSC);              //Start The Conversion from ADC.
 4fe:	36 9a       	sbi	0x06, 6	; 6
	
	while (IS_BIT_CLR(ADCSRA, ADIF)) ;   //Stand-Still While ADC Conversion.
 500:	86 b1       	in	r24, 0x06	; 6
	
	SET_BIT(ADCSRA, ADIF);               //Clear the Flag Bit of ADC.
 502:	34 9a       	sbi	0x06, 4	; 6
	
	ADC_val = (ADCL);                    // Reading the Low Value from ADC.
 504:	84 b1       	in	r24, 0x04	; 4
	ADC_val |= (ADCH<<8);                // Reading the High Value from ADC.
 506:	25 b1       	in	r18, 0x05	; 5
 508:	90 e0       	ldi	r25, 0x00	; 0
	
	return ADC_val;           
}
 50a:	92 2b       	or	r25, r18
 50c:	08 95       	ret

0000050e <ADC_pin>:

//.......................................................................

void ADC_pin (unsigned char pin)
{
	switch (pin)
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	88 30       	cpi	r24, 0x08	; 8
 512:	91 05       	cpc	r25, r1
 514:	20 f5       	brcc	.+72     	; 0x55e <ADC_pin+0x50>
 516:	fc 01       	movw	r30, r24
 518:	e6 5d       	subi	r30, 0xD6	; 214
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__tablejump2__>
	{
		case 0 :
		CLR_BIT(ADMUX, MUX0);
 520:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 522:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 524:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, MUX3);
		//CLR_BIT(ADMUX, MUX4);
		break;
 526:	08 95       	ret
		
		case 1 :
		SET_BIT(ADMUX, MUX0);
 528:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 52a:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 52c:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 52e:	08 95       	ret
		
		case 2 :
		CLR_BIT(ADMUX, MUX0);
 530:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 532:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 534:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 536:	08 95       	ret
		
		case 3 :
		SET_BIT(ADMUX, MUX0);
 538:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 53a:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX, MUX2);
 53c:	3a 98       	cbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 53e:	08 95       	ret
		
		case 4 :
		CLR_BIT(ADMUX, MUX0);
 540:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 542:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 544:	3a 9a       	sbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 546:	08 95       	ret
		
		case 5 :
		SET_BIT(ADMUX, MUX0);
 548:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX, MUX1);
 54a:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 54c:	3a 9a       	sbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 54e:	08 95       	ret
		
		case 6 :
		CLR_BIT(ADMUX, MUX0);
 550:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 552:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 554:	3a 9a       	sbi	0x07, 2	; 7
		//CLR_BIT(ADMUX, 3);
		//CLR_BIT(ADMUX, 4);
		break;
 556:	08 95       	ret
		
		case 7 :
		SET_BIT(ADMUX, MUX0);
 558:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX, MUX1);
 55a:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX, MUX2);
 55c:	3a 9a       	sbi	0x07, 2	; 7
 55e:	08 95       	ret

00000560 <DIO_set_pin_dir>:
#include <avr/io.h> 
#include "my_macros.h"      //My standard  bit macros impelimentation.

void DIO_set_pin_dir(unsigned char port, unsigned char pin, unsigned char direction)    //Function to set a specific pin direction 'I/P'(@direction=0) or 'O/P'(@direction=1).
{
  switch (port)
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	fc 01       	movw	r30, r24
 564:	e1 54       	subi	r30, 0x41	; 65
 566:	f1 09       	sbc	r31, r1
 568:	e4 32       	cpi	r30, 0x24	; 36
 56a:	f1 05       	cpc	r31, r1
 56c:	08 f0       	brcs	.+2      	; 0x570 <DIO_set_pin_dir+0x10>
 56e:	77 c0       	rjmp	.+238    	; 0x65e <DIO_set_pin_dir+0xfe>
 570:	ee 5c       	subi	r30, 0xCE	; 206
 572:	ff 4f       	sbci	r31, 0xFF	; 255
 574:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__tablejump2__>
  {
    case 'A':                     // @Port 'A'.
    case 'a':                     // @Port 'a'.
    if (1== direction)            // '1' is for 'I/P'.
 578:	41 30       	cpi	r20, 0x01	; 1
 57a:	69 f4       	brne	.+26     	; 0x596 <DIO_set_pin_dir+0x36>
    {
      SET_BIT(DDRA, pin);         // Set the pin 'PIN' in port 'A' as 'O/P'.
 57c:	2a b3       	in	r18, 0x1a	; 26
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	ac 01       	movw	r20, r24
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_set_pin_dir+0x2a>
 586:	44 0f       	add	r20, r20
 588:	55 1f       	adc	r21, r21
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_set_pin_dir+0x26>
 58e:	ba 01       	movw	r22, r20
 590:	62 2b       	or	r22, r18
 592:	6a bb       	out	0x1a, r22	; 26
 594:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRA, pin);        // Set the pin 'PIN' in port 'A' as 'I/P'.
 596:	2a b3       	in	r18, 0x1a	; 26
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	ac 01       	movw	r20, r24
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_set_pin_dir+0x44>
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_set_pin_dir+0x40>
 5a8:	ba 01       	movw	r22, r20
 5aa:	60 95       	com	r22
 5ac:	62 23       	and	r22, r18
 5ae:	6a bb       	out	0x1a, r22	; 26
 5b0:	08 95       	ret
    } 
    break;

    case 'B':                    // @Port 'B'.
    case 'b':                    // @Port 'b'.
    if (1==direction)            // '1' is for 'I/P'.
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	69 f4       	brne	.+26     	; 0x5d0 <DIO_set_pin_dir+0x70>
    {
      SET_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'I/P'.
 5b6:	27 b3       	in	r18, 0x17	; 23
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	ac 01       	movw	r20, r24
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_set_pin_dir+0x64>
 5c0:	44 0f       	add	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_set_pin_dir+0x60>
 5c8:	ba 01       	movw	r22, r20
 5ca:	62 2b       	or	r22, r18
 5cc:	67 bb       	out	0x17, r22	; 23
 5ce:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRB, pin);        // Set the pin 'PIN' in port 'B' as 'O/P'.
 5d0:	27 b3       	in	r18, 0x17	; 23
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	ac 01       	movw	r20, r24
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_set_pin_dir+0x7e>
 5da:	44 0f       	add	r20, r20
 5dc:	55 1f       	adc	r21, r21
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_set_pin_dir+0x7a>
 5e2:	ba 01       	movw	r22, r20
 5e4:	60 95       	com	r22
 5e6:	62 23       	and	r22, r18
 5e8:	67 bb       	out	0x17, r22	; 23
 5ea:	08 95       	ret
    }
    break;

    case 'C':                    // @Port 'C'.
    case 'c':                    // @Port 'c'. 
    if (1==direction)            // '1' is for 'I/P'.
 5ec:	41 30       	cpi	r20, 0x01	; 1
 5ee:	69 f4       	brne	.+26     	; 0x60a <DIO_set_pin_dir+0xaa>
    {
      SET_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'I/P'. 
 5f0:	24 b3       	in	r18, 0x14	; 20
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	ac 01       	movw	r20, r24
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_set_pin_dir+0x9e>
 5fa:	44 0f       	add	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_set_pin_dir+0x9a>
 602:	ba 01       	movw	r22, r20
 604:	62 2b       	or	r22, r18
 606:	64 bb       	out	0x14, r22	; 20
 608:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRC, pin);        // Set the pin 'PIN' in port 'C' as 'O/P'. 
 60a:	24 b3       	in	r18, 0x14	; 20
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	ac 01       	movw	r20, r24
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_set_pin_dir+0xb8>
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_set_pin_dir+0xb4>
 61c:	ba 01       	movw	r22, r20
 61e:	60 95       	com	r22
 620:	62 23       	and	r22, r18
 622:	64 bb       	out	0x14, r22	; 20
 624:	08 95       	ret
    }
    break;

    case 'D':                    // @Port 'D'.
    case 'd':                    // @Port 'd'. 
    if (1==direction)            // '1' is for 'I/P'.
 626:	41 30       	cpi	r20, 0x01	; 1
 628:	69 f4       	brne	.+26     	; 0x644 <DIO_set_pin_dir+0xe4>
    {
      SET_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'I/P'. 
 62a:	21 b3       	in	r18, 0x11	; 17
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	ac 01       	movw	r20, r24
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_set_pin_dir+0xd8>
 634:	44 0f       	add	r20, r20
 636:	55 1f       	adc	r21, r21
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_set_pin_dir+0xd4>
 63c:	ba 01       	movw	r22, r20
 63e:	62 2b       	or	r22, r18
 640:	61 bb       	out	0x11, r22	; 17
 642:	08 95       	ret
    }
    else
    {
      CLR_BIT(DDRD, pin);        // Set the pin 'PIN' in port 'D' as 'O/P'.
 644:	21 b3       	in	r18, 0x11	; 17
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	ac 01       	movw	r20, r24
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_set_pin_dir+0xf2>
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	6a 95       	dec	r22
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_set_pin_dir+0xee>
 656:	ba 01       	movw	r22, r20
 658:	60 95       	com	r22
 65a:	62 23       	and	r22, r18
 65c:	61 bb       	out	0x11, r22	; 17
 65e:	08 95       	ret

00000660 <DIO_write_pin>:
//..................................................................................


void DIO_write_pin(unsigned char port, unsigned char pin, unsigned char value)  //Set the 'O/P' pin as 'HIGH' or 'LOW'
{
  switch (port)
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	fc 01       	movw	r30, r24
 664:	e1 54       	subi	r30, 0x41	; 65
 666:	f1 09       	sbc	r31, r1
 668:	e4 32       	cpi	r30, 0x24	; 36
 66a:	f1 05       	cpc	r31, r1
 66c:	08 f0       	brcs	.+2      	; 0x670 <DIO_write_pin+0x10>
 66e:	77 c0       	rjmp	.+238    	; 0x75e <DIO_write_pin+0xfe>
 670:	ea 5a       	subi	r30, 0xAA	; 170
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__tablejump2__>
  {
    case 'A':                  // @Port 'A'.
    case 'a':                  // @Port 'a'.
    if (1==value)             
 678:	41 30       	cpi	r20, 0x01	; 1
 67a:	69 f4       	brne	.+26     	; 0x696 <DIO_write_pin+0x36>
    {
      SET_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'HIGH'.
 67c:	2b b3       	in	r18, 0x1b	; 27
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	ac 01       	movw	r20, r24
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_write_pin+0x2a>
 686:	44 0f       	add	r20, r20
 688:	55 1f       	adc	r21, r21
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_write_pin+0x26>
 68e:	ba 01       	movw	r22, r20
 690:	62 2b       	or	r22, r18
 692:	6b bb       	out	0x1b, r22	; 27
 694:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTA, pin);     // Set pin 'PIN' in port 'A' as 'LOW'.
 696:	2b b3       	in	r18, 0x1b	; 27
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	ac 01       	movw	r20, r24
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_write_pin+0x44>
 6a0:	44 0f       	add	r20, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	6a 95       	dec	r22
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_write_pin+0x40>
 6a8:	ba 01       	movw	r22, r20
 6aa:	60 95       	com	r22
 6ac:	62 23       	and	r22, r18
 6ae:	6b bb       	out	0x1b, r22	; 27
 6b0:	08 95       	ret
    }
    break;
  
    case 'B':                  // @Port 'B'.
    case 'b':                  // @Port 'b'.
    if (1==value)             
 6b2:	41 30       	cpi	r20, 0x01	; 1
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <DIO_write_pin+0x70>
    {
      SET_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'HIGH'.
 6b6:	28 b3       	in	r18, 0x18	; 24
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	ac 01       	movw	r20, r24
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_write_pin+0x64>
 6c0:	44 0f       	add	r20, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	6a 95       	dec	r22
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_write_pin+0x60>
 6c8:	ba 01       	movw	r22, r20
 6ca:	62 2b       	or	r22, r18
 6cc:	68 bb       	out	0x18, r22	; 24
 6ce:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTB, pin);    // Set pin 'PIN' in port 'B' as 'LOW'.
 6d0:	28 b3       	in	r18, 0x18	; 24
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	ac 01       	movw	r20, r24
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_write_pin+0x7e>
 6da:	44 0f       	add	r20, r20
 6dc:	55 1f       	adc	r21, r21
 6de:	6a 95       	dec	r22
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_write_pin+0x7a>
 6e2:	ba 01       	movw	r22, r20
 6e4:	60 95       	com	r22
 6e6:	62 23       	and	r22, r18
 6e8:	68 bb       	out	0x18, r22	; 24
 6ea:	08 95       	ret
    }
    break;

    case 'C':                  // @Port 'C'.
    case 'c':                  // @Port 'c'.
    if (1==value)             
 6ec:	41 30       	cpi	r20, 0x01	; 1
 6ee:	69 f4       	brne	.+26     	; 0x70a <DIO_write_pin+0xaa>
    {
      SET_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'HIGH'.
 6f0:	25 b3       	in	r18, 0x15	; 21
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	ac 01       	movw	r20, r24
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_write_pin+0x9e>
 6fa:	44 0f       	add	r20, r20
 6fc:	55 1f       	adc	r21, r21
 6fe:	6a 95       	dec	r22
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_write_pin+0x9a>
 702:	ba 01       	movw	r22, r20
 704:	62 2b       	or	r22, r18
 706:	65 bb       	out	0x15, r22	; 21
 708:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTC, pin);    // Set pin 'PIN' in port 'C' as 'LOW'.
 70a:	25 b3       	in	r18, 0x15	; 21
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	ac 01       	movw	r20, r24
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_write_pin+0xb8>
 714:	44 0f       	add	r20, r20
 716:	55 1f       	adc	r21, r21
 718:	6a 95       	dec	r22
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_write_pin+0xb4>
 71c:	ba 01       	movw	r22, r20
 71e:	60 95       	com	r22
 720:	62 23       	and	r22, r18
 722:	65 bb       	out	0x15, r22	; 21
 724:	08 95       	ret
    }
    break;
  
    case 'D':                // @Port 'D'.
    case 'd':                // @Port 'd'.
    if (1==value)             
 726:	41 30       	cpi	r20, 0x01	; 1
 728:	69 f4       	brne	.+26     	; 0x744 <DIO_write_pin+0xe4>
    {
      SET_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'HIGH'.
 72a:	22 b3       	in	r18, 0x12	; 18
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	ac 01       	movw	r20, r24
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_write_pin+0xd8>
 734:	44 0f       	add	r20, r20
 736:	55 1f       	adc	r21, r21
 738:	6a 95       	dec	r22
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_write_pin+0xd4>
 73c:	ba 01       	movw	r22, r20
 73e:	62 2b       	or	r22, r18
 740:	62 bb       	out	0x12, r22	; 18
 742:	08 95       	ret
    }
    else
    {
      CLR_BIT(PORTD, pin);   // Set pin 'PIN' in port 'D' as 'LOW'.
 744:	22 b3       	in	r18, 0x12	; 18
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	ac 01       	movw	r20, r24
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_write_pin+0xf2>
 74e:	44 0f       	add	r20, r20
 750:	55 1f       	adc	r21, r21
 752:	6a 95       	dec	r22
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_write_pin+0xee>
 756:	ba 01       	movw	r22, r20
 758:	60 95       	com	r22
 75a:	62 23       	and	r22, r18
 75c:	62 bb       	out	0x12, r22	; 18
 75e:	08 95       	ret

00000760 <DIO_write_nibble>:

//..................................................................................

void DIO_write_nibble (unsigned char port, unsigned char value, unsigned char nibble)    //Write a value (4-bits) on 'HIGH'(@nibble=1) or 'LOW'(@nibble=0) of 'port' 
{
  if (0 == nibble)          // '0': write on low nibble pins in 'O/P' pins
 760:	41 11       	cpse	r20, r1
 762:	29 c0       	rjmp	.+82     	; 0x7b6 <DIO_write_nibble+0x56>
  {
    value &= 0x0f;
 764:	6f 70       	andi	r22, 0x0F	; 15

    switch (port)
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	fc 01       	movw	r30, r24
 76a:	e1 54       	subi	r30, 0x41	; 65
 76c:	f1 09       	sbc	r31, r1
 76e:	e4 32       	cpi	r30, 0x24	; 36
 770:	f1 05       	cpc	r31, r1
 772:	08 f0       	brcs	.+2      	; 0x776 <DIO_write_nibble+0x16>
 774:	4a c0       	rjmp	.+148    	; 0x80a <DIO_write_nibble+0xaa>
 776:	e6 58       	subi	r30, 0x86	; 134
 778:	ff 4f       	sbci	r31, 0xFF	; 255
 77a:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__tablejump2__>
    {
      case 'A':
      case 'a':
      PORTA &= 0xf0;
 77e:	8b b3       	in	r24, 0x1b	; 27
 780:	80 7f       	andi	r24, 0xF0	; 240
 782:	8b bb       	out	0x1b, r24	; 27
      PORTA |= value;
 784:	8b b3       	in	r24, 0x1b	; 27
 786:	68 2b       	or	r22, r24
 788:	6b bb       	out	0x1b, r22	; 27
      break;
 78a:	08 95       	ret

      case 'B':
      case 'b':
      PORTB &= 0xf0;
 78c:	88 b3       	in	r24, 0x18	; 24
 78e:	80 7f       	andi	r24, 0xF0	; 240
 790:	88 bb       	out	0x18, r24	; 24
      PORTB |= value;
 792:	88 b3       	in	r24, 0x18	; 24
 794:	68 2b       	or	r22, r24
 796:	68 bb       	out	0x18, r22	; 24
      break;
 798:	08 95       	ret
    
      case 'C':
      case 'c':
      PORTC &= 0xf0;
 79a:	85 b3       	in	r24, 0x15	; 21
 79c:	80 7f       	andi	r24, 0xF0	; 240
 79e:	85 bb       	out	0x15, r24	; 21
      PORTC |= value;
 7a0:	85 b3       	in	r24, 0x15	; 21
 7a2:	68 2b       	or	r22, r24
 7a4:	65 bb       	out	0x15, r22	; 21
      break;
 7a6:	08 95       	ret
    
      case 'D':
      case 'd':
      PORTD &= 0xf0;
 7a8:	82 b3       	in	r24, 0x12	; 18
 7aa:	80 7f       	andi	r24, 0xF0	; 240
 7ac:	82 bb       	out	0x12, r24	; 18
      PORTD |= value;
 7ae:	82 b3       	in	r24, 0x12	; 18
 7b0:	68 2b       	or	r22, r24
 7b2:	62 bb       	out	0x12, r22	; 18
      break;
 7b4:	08 95       	ret
      default:
      break;
    }
  }

  else if (1 == nibble)    // '1': write on 'HIGH' nibble pins in 'O/P' pins
 7b6:	41 30       	cpi	r20, 0x01	; 1
 7b8:	41 f5       	brne	.+80     	; 0x80a <DIO_write_nibble+0xaa>
  {
    value <<= 4;
 7ba:	62 95       	swap	r22
 7bc:	60 7f       	andi	r22, 0xF0	; 240

    switch (port)
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	fc 01       	movw	r30, r24
 7c2:	e1 54       	subi	r30, 0x41	; 65
 7c4:	f1 09       	sbc	r31, r1
 7c6:	e4 32       	cpi	r30, 0x24	; 36
 7c8:	f1 05       	cpc	r31, r1
 7ca:	f8 f4       	brcc	.+62     	; 0x80a <DIO_write_nibble+0xaa>
 7cc:	e2 56       	subi	r30, 0x62	; 98
 7ce:	ff 4f       	sbci	r31, 0xFF	; 255
 7d0:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__tablejump2__>
    {
      case 'A':
      case 'a':
      PORTA &= 0x0f;
 7d4:	8b b3       	in	r24, 0x1b	; 27
 7d6:	8f 70       	andi	r24, 0x0F	; 15
 7d8:	8b bb       	out	0x1b, r24	; 27
      PORTA |= value;
 7da:	8b b3       	in	r24, 0x1b	; 27
 7dc:	68 2b       	or	r22, r24
 7de:	6b bb       	out	0x1b, r22	; 27
      break;
 7e0:	08 95       	ret

      case 'B':
      case 'b':
      PORTB &= 0x0f;
 7e2:	88 b3       	in	r24, 0x18	; 24
 7e4:	8f 70       	andi	r24, 0x0F	; 15
 7e6:	88 bb       	out	0x18, r24	; 24
      PORTB |= value;
 7e8:	88 b3       	in	r24, 0x18	; 24
 7ea:	68 2b       	or	r22, r24
 7ec:	68 bb       	out	0x18, r22	; 24
      break;
 7ee:	08 95       	ret
     
      case 'C':
      case 'c':
      PORTC &= 0x0f;
 7f0:	85 b3       	in	r24, 0x15	; 21
 7f2:	8f 70       	andi	r24, 0x0F	; 15
 7f4:	85 bb       	out	0x15, r24	; 21
      PORTC |= value;
 7f6:	85 b3       	in	r24, 0x15	; 21
 7f8:	68 2b       	or	r22, r24
 7fa:	65 bb       	out	0x15, r22	; 21
      break;
 7fc:	08 95       	ret
    
      case 'D':
      case 'd':
      PORTD &= 0x0f;
 7fe:	82 b3       	in	r24, 0x12	; 18
 800:	8f 70       	andi	r24, 0x0F	; 15
 802:	82 bb       	out	0x12, r24	; 18
      PORTD |= value;
 804:	82 b3       	in	r24, 0x12	; 18
 806:	68 2b       	or	r22, r24
 808:	62 bb       	out	0x12, r22	; 18
 80a:	08 95       	ret

0000080c <LCD_send_falling_edge>:
#include <util/delay.h>


static void LCD_send_falling_edge ()
{
	DIO_write_pin(ctrl_port, EN, 1);
 80c:	41 e0       	ldi	r20, 0x01	; 1
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	65 e0       	ldi	r22, 0x05	; 5
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	84 e4       	ldi	r24, 0x44	; 68
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 81c:	8f e9       	ldi	r24, 0x9F	; 159
 81e:	9f e0       	ldi	r25, 0x0F	; 15
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <LCD_send_falling_edge+0x14>
 824:	00 c0       	rjmp	.+0      	; 0x826 <LCD_send_falling_edge+0x1a>
 826:	00 00       	nop
	_delay_ms(2);
	
	DIO_write_pin(ctrl_port, EN, 0);
 828:	40 e0       	ldi	r20, 0x00	; 0
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	65 e0       	ldi	r22, 0x05	; 5
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	84 e4       	ldi	r24, 0x44	; 68
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_pin>
 838:	8f e9       	ldi	r24, 0x9F	; 159
 83a:	9f e0       	ldi	r25, 0x0F	; 15
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <LCD_send_falling_edge+0x30>
 840:	00 c0       	rjmp	.+0      	; 0x842 <LCD_send_falling_edge+0x36>
 842:	00 00       	nop
 844:	08 95       	ret

00000846 <LCD_send_cmd>:
} 

//.......................................................................

void LCD_send_cmd (unsigned char cmd)  
{
 846:	cf 93       	push	r28
 848:	c8 2f       	mov	r28, r24
	DIO_write_pin(ctrl_port, RS, 0);
	LCD_send_falling_edge();
	_delay_ms(1);

  #elif defined four_bit_mode                    //@ 4-Bit mode
	DIO_write_nibble(data_port, cmd>>4, nibble);
 84a:	68 2f       	mov	r22, r24
 84c:	62 95       	swap	r22
 84e:	6f 70       	andi	r22, 0x0F	; 15
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	41 e0       	ldi	r20, 0x01	; 1
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	83 e4       	ldi	r24, 0x43	; 67
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 b0 03 	call	0x760	; 0x760 <DIO_write_nibble>
	DIO_write_pin(ctrl_port, RS, 0);
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	67 e0       	ldi	r22, 0x07	; 7
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	84 e4       	ldi	r24, 0x44	; 68
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_pin>
	LCD_send_falling_edge();
 86e:	0e 94 06 04 	call	0x80c	; 0x80c <LCD_send_falling_edge>
	
	DIO_write_nibble(data_port, cmd, nibble);
 872:	6c 2f       	mov	r22, r28
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	41 e0       	ldi	r20, 0x01	; 1
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	83 e4       	ldi	r24, 0x43	; 67
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 b0 03 	call	0x760	; 0x760 <DIO_write_nibble>
	DIO_write_pin(ctrl_port, RS, 0);
 882:	40 e0       	ldi	r20, 0x00	; 0
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	67 e0       	ldi	r22, 0x07	; 7
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	84 e4       	ldi	r24, 0x44	; 68
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_pin>
	LCD_send_falling_edge();
 892:	0e 94 06 04 	call	0x80c	; 0x80c <LCD_send_falling_edge>
 896:	8f ec       	ldi	r24, 0xCF	; 207
 898:	97 e0       	ldi	r25, 0x07	; 7
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	f1 f7       	brne	.-4      	; 0x89a <__stack+0x3b>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <__stack+0x41>
 8a0:	00 00       	nop
	_delay_ms(1);

  #endif
}
 8a2:	cf 91       	pop	r28
 8a4:	08 95       	ret

000008a6 <LCD_init>:
 8a6:	2f e7       	ldi	r18, 0x7F	; 127
 8a8:	88 e3       	ldi	r24, 0x38	; 56
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	21 50       	subi	r18, 0x01	; 1
 8ae:	80 40       	sbci	r24, 0x00	; 0
 8b0:	90 40       	sbci	r25, 0x00	; 0
 8b2:	e1 f7       	brne	.-8      	; 0x8ac <LCD_init+0x6>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <LCD_init+0x10>
 8b6:	00 00       	nop
    LCD_send_cmd(entry_DDRAM_inc_dis_right);
    _delay_ms(1);
	
#elif defined four_bit_mode     //@ 4-Bit mode
    _delay_ms(50);
    DIO_set_pin_dir(data_port, D4, 1);
 8b8:	41 e0       	ldi	r20, 0x01	; 1
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	64 e0       	ldi	r22, 0x04	; 4
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	83 e4       	ldi	r24, 0x43	; 67
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
    DIO_set_pin_dir(data_port, D5, 1);
 8c8:	41 e0       	ldi	r20, 0x01	; 1
 8ca:	50 e0       	ldi	r21, 0x00	; 0
 8cc:	65 e0       	ldi	r22, 0x05	; 5
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	83 e4       	ldi	r24, 0x43	; 67
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
    DIO_set_pin_dir(data_port, D6, 1);
 8d8:	41 e0       	ldi	r20, 0x01	; 1
 8da:	50 e0       	ldi	r21, 0x00	; 0
 8dc:	66 e0       	ldi	r22, 0x06	; 6
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	83 e4       	ldi	r24, 0x43	; 67
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
    DIO_set_pin_dir(data_port, D7, 1);
 8e8:	41 e0       	ldi	r20, 0x01	; 1
 8ea:	50 e0       	ldi	r21, 0x00	; 0
 8ec:	67 e0       	ldi	r22, 0x07	; 7
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	83 e4       	ldi	r24, 0x43	; 67
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
    DIO_set_pin_dir(ctrl_port, EN, 1);    //Set the 'ENABLE' Pin as 'O/P'
 8f8:	41 e0       	ldi	r20, 0x01	; 1
 8fa:	50 e0       	ldi	r21, 0x00	; 0
 8fc:	65 e0       	ldi	r22, 0x05	; 5
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	84 e4       	ldi	r24, 0x44	; 68
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
    DIO_set_pin_dir(ctrl_port, RS, 1);    //Set the 'RESET' Pin as 'O/P'
 908:	41 e0       	ldi	r20, 0x01	; 1
 90a:	50 e0       	ldi	r21, 0x00	; 0
 90c:	67 e0       	ldi	r22, 0x07	; 7
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	84 e4       	ldi	r24, 0x44	; 68
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
    DIO_set_pin_dir(ctrl_port, RW, 1);    //Set the 'READ/WRITE' Pin as 'O/P'
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	66 e0       	ldi	r22, 0x06	; 6
 91e:	70 e0       	ldi	r23, 0x00	; 0
 920:	84 e4       	ldi	r24, 0x44	; 68
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
  
    DIO_write_pin(ctrl_port, RW, 0);
 928:	40 e0       	ldi	r20, 0x00	; 0
 92a:	50 e0       	ldi	r21, 0x00	; 0
 92c:	66 e0       	ldi	r22, 0x06	; 6
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	84 e4       	ldi	r24, 0x44	; 68
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_pin>
	
	LCD_send_cmd(rtn_home);
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	0e 94 23 04 	call	0x846	; 0x846 <LCD_send_cmd>
 93e:	8f e1       	ldi	r24, 0x1F	; 31
 940:	9e e4       	ldi	r25, 0x4E	; 78
 942:	01 97       	sbiw	r24, 0x01	; 1
 944:	f1 f7       	brne	.-4      	; 0x942 <LCD_init+0x9c>
 946:	00 c0       	rjmp	.+0      	; 0x948 <LCD_init+0xa2>
 948:	00 00       	nop
	_delay_ms(10);
  
    LCD_send_cmd(four_bit_2_line_5x7);
 94a:	88 e2       	ldi	r24, 0x28	; 40
 94c:	0e 94 23 04 	call	0x846	; 0x846 <LCD_send_cmd>
 950:	8f ec       	ldi	r24, 0xCF	; 207
 952:	97 e0       	ldi	r25, 0x07	; 7
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	f1 f7       	brne	.-4      	; 0x954 <LCD_init+0xae>
 958:	00 c0       	rjmp	.+0      	; 0x95a <LCD_init+0xb4>
 95a:	00 00       	nop
    _delay_ms(1);
  
    LCD_send_cmd(disp_on_curs_off_solid);
 95c:	8c e0       	ldi	r24, 0x0C	; 12
 95e:	0e 94 23 04 	call	0x846	; 0x846 <LCD_send_cmd>
 962:	8f ec       	ldi	r24, 0xCF	; 207
 964:	97 e0       	ldi	r25, 0x07	; 7
 966:	01 97       	sbiw	r24, 0x01	; 1
 968:	f1 f7       	brne	.-4      	; 0x966 <LCD_init+0xc0>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <LCD_init+0xc6>
 96c:	00 00       	nop
    _delay_ms(1);
  
    LCD_send_cmd(clr_disp);
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	0e 94 23 04 	call	0x846	; 0x846 <LCD_send_cmd>
 974:	8f e1       	ldi	r24, 0x1F	; 31
 976:	9e e4       	ldi	r25, 0x4E	; 78
 978:	01 97       	sbiw	r24, 0x01	; 1
 97a:	f1 f7       	brne	.-4      	; 0x978 <LCD_init+0xd2>
 97c:	00 c0       	rjmp	.+0      	; 0x97e <LCD_init+0xd8>
 97e:	00 00       	nop
    _delay_ms(10);
  
    LCD_send_cmd(entry_DDRAM_inc_dis_right);
 980:	86 e0       	ldi	r24, 0x06	; 6
 982:	0e 94 23 04 	call	0x846	; 0x846 <LCD_send_cmd>
 986:	8f ec       	ldi	r24, 0xCF	; 207
 988:	97 e0       	ldi	r25, 0x07	; 7
 98a:	01 97       	sbiw	r24, 0x01	; 1
 98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_init+0xe4>
 98e:	00 c0       	rjmp	.+0      	; 0x990 <LCD_init+0xea>
 990:	00 00       	nop
 992:	08 95       	ret

00000994 <LCD_send_char>:
}

//.......................................................................

void LCD_send_char (unsigned char data)  
{
 994:	cf 93       	push	r28
 996:	c8 2f       	mov	r28, r24
    DIO_write_pin(ctrl_port, RS, 1);
    LCD_send_falling_edge();
	_delay_ms(1);
	
#elif defined four_bit_mode          //@ 4-Bit mode
    DIO_write_nibble(data_port, data>>4, nibble);   //Low Nibble
 998:	68 2f       	mov	r22, r24
 99a:	62 95       	swap	r22
 99c:	6f 70       	andi	r22, 0x0F	; 15
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	41 e0       	ldi	r20, 0x01	; 1
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	83 e4       	ldi	r24, 0x43	; 67
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 b0 03 	call	0x760	; 0x760 <DIO_write_nibble>
    DIO_write_pin(ctrl_port, RS, 1);
 9ac:	41 e0       	ldi	r20, 0x01	; 1
 9ae:	50 e0       	ldi	r21, 0x00	; 0
 9b0:	67 e0       	ldi	r22, 0x07	; 7
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	84 e4       	ldi	r24, 0x44	; 68
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_pin>
    LCD_send_falling_edge();
 9bc:	0e 94 06 04 	call	0x80c	; 0x80c <LCD_send_falling_edge>
  
    DIO_write_nibble(data_port, data, nibble);     //Low Nibble
 9c0:	6c 2f       	mov	r22, r28
 9c2:	70 e0       	ldi	r23, 0x00	; 0
 9c4:	41 e0       	ldi	r20, 0x01	; 1
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	83 e4       	ldi	r24, 0x43	; 67
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0e 94 b0 03 	call	0x760	; 0x760 <DIO_write_nibble>
    DIO_write_pin(ctrl_port, RS, 1);
 9d0:	41 e0       	ldi	r20, 0x01	; 1
 9d2:	50 e0       	ldi	r21, 0x00	; 0
 9d4:	67 e0       	ldi	r22, 0x07	; 7
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	84 e4       	ldi	r24, 0x44	; 68
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0e 94 30 03 	call	0x660	; 0x660 <DIO_write_pin>
    LCD_send_falling_edge();
 9e0:	0e 94 06 04 	call	0x80c	; 0x80c <LCD_send_falling_edge>
 9e4:	8f ec       	ldi	r24, 0xCF	; 207
 9e6:	97 e0       	ldi	r25, 0x07	; 7
 9e8:	01 97       	sbiw	r24, 0x01	; 1
 9ea:	f1 f7       	brne	.-4      	; 0x9e8 <LCD_send_char+0x54>
 9ec:	00 c0       	rjmp	.+0      	; 0x9ee <LCD_send_char+0x5a>
 9ee:	00 00       	nop
    _delay_ms(1);

#endif
}
 9f0:	cf 91       	pop	r28
 9f2:	08 95       	ret

000009f4 <LCD_send_string>:

//.......................................................................

void LCD_send_string (unsigned char *data)
{
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	ec 01       	movw	r28, r24
  while((*data) != '\0')
 9fa:	88 81       	ld	r24, Y
 9fc:	88 23       	and	r24, r24
 9fe:	31 f0       	breq	.+12     	; 0xa0c <LCD_send_string+0x18>
 a00:	21 96       	adiw	r28, 0x01	; 1
  {
	  LCD_send_char(*data);
 a02:	0e 94 ca 04 	call	0x994	; 0x994 <LCD_send_char>

//.......................................................................

void LCD_send_string (unsigned char *data)
{
  while((*data) != '\0')
 a06:	89 91       	ld	r24, Y+
 a08:	81 11       	cpse	r24, r1
 a0a:	fb cf       	rjmp	.-10     	; 0xa02 <LCD_send_string+0xe>
  {
	  LCD_send_char(*data);
	  data++;
  }
}
 a0c:	df 91       	pop	r29
 a0e:	cf 91       	pop	r28
 a10:	08 95       	ret

00000a12 <LCD_move_cursor>:

void LCD_move_cursor (unsigned char row, unsigned char coloumn)
{
  unsigned char data;
  
  if((row>2) || (row<1) || (coloumn>16) || (coloumn<1))
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	98 0f       	add	r25, r24
 a16:	92 30       	cpi	r25, 0x02	; 2
 a18:	70 f4       	brcc	.+28     	; 0xa36 <LCD_move_cursor+0x24>
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	96 0f       	add	r25, r22
 a1e:	90 31       	cpi	r25, 0x10	; 16
 a20:	60 f4       	brcc	.+24     	; 0xa3a <LCD_move_cursor+0x28>
  {
	  data = 0x80;
  }
  
  else if(1==row)
 a22:	81 30       	cpi	r24, 0x01	; 1
 a24:	19 f4       	brne	.+6      	; 0xa2c <LCD_move_cursor+0x1a>
  {
	  data = 0x80 + (coloumn-1);
 a26:	2f e7       	ldi	r18, 0x7F	; 127
 a28:	26 0f       	add	r18, r22
 a2a:	08 c0       	rjmp	.+16     	; 0xa3c <LCD_move_cursor+0x2a>
  }
  
  else if(2==row)
 a2c:	82 30       	cpi	r24, 0x02	; 2
 a2e:	31 f4       	brne	.+12     	; 0xa3c <LCD_move_cursor+0x2a>
  {
	  data = 0xc0 + (coloumn-1);
 a30:	2f eb       	ldi	r18, 0xBF	; 191
 a32:	26 0f       	add	r18, r22
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <LCD_move_cursor+0x2a>
{
  unsigned char data;
  
  if((row>2) || (row<1) || (coloumn>16) || (coloumn<1))
  {
	  data = 0x80;
 a36:	20 e8       	ldi	r18, 0x80	; 128
 a38:	01 c0       	rjmp	.+2      	; 0xa3c <LCD_move_cursor+0x2a>
 a3a:	20 e8       	ldi	r18, 0x80	; 128
  else if(2==row)
  {
	  data = 0xc0 + (coloumn-1);
  }
  
  LCD_send_cmd(data);
 a3c:	82 2f       	mov	r24, r18
 a3e:	0e 94 23 04 	call	0x846	; 0x846 <LCD_send_cmd>
 a42:	8f ec       	ldi	r24, 0xCF	; 207
 a44:	97 e0       	ldi	r25, 0x07	; 7
 a46:	01 97       	sbiw	r24, 0x01	; 1
 a48:	f1 f7       	brne	.-4      	; 0xa46 <LCD_move_cursor+0x34>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <LCD_move_cursor+0x3a>
 a4c:	00 00       	nop
 a4e:	08 95       	ret

00000a50 <SPI_slave_init>:

//..............................................................

void SPI_slave_init(void)
{
	SET_BIT (SPCR, SPE);    //Enable SPI.
 a50:	6e 9a       	sbi	0x0d, 6	; 13
	
	/*
	  Configure the pins of SPI
	*/
	DIO_set_pin_dir('B', 6, 1);  //Set MISO pin as O/P
 a52:	41 e0       	ldi	r20, 0x01	; 1
 a54:	66 e0       	ldi	r22, 0x06	; 6
 a56:	82 e4       	ldi	r24, 0x42	; 66
 a58:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
	DIO_set_pin_dir('B', 5, 0);  //Set MOSI pin as I/P
 a5c:	40 e0       	ldi	r20, 0x00	; 0
 a5e:	65 e0       	ldi	r22, 0x05	; 5
 a60:	82 e4       	ldi	r24, 0x42	; 66
 a62:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_set_pin_dir>
 a66:	08 95       	ret

00000a68 <UART_init>:

void UART_init (unsigned long baud)
{
	//Choose the baud rate that will be used by sender and receiver.
	unsigned short UBRR;                 //Initializing UBRR variable.
	UBRR = (F_CPU / (16*baud))-1;        //Calculating the UBRR value.
 a68:	dc 01       	movw	r26, r24
 a6a:	cb 01       	movw	r24, r22
 a6c:	88 0f       	add	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	aa 1f       	adc	r26, r26
 a72:	bb 1f       	adc	r27, r27
 a74:	88 0f       	add	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	aa 1f       	adc	r26, r26
 a7a:	bb 1f       	adc	r27, r27
 a7c:	9c 01       	movw	r18, r24
 a7e:	ad 01       	movw	r20, r26
 a80:	22 0f       	add	r18, r18
 a82:	33 1f       	adc	r19, r19
 a84:	44 1f       	adc	r20, r20
 a86:	55 1f       	adc	r21, r21
 a88:	22 0f       	add	r18, r18
 a8a:	33 1f       	adc	r19, r19
 a8c:	44 1f       	adc	r20, r20
 a8e:	55 1f       	adc	r21, r21
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	72 e1       	ldi	r23, 0x12	; 18
 a94:	8a e7       	ldi	r24, 0x7A	; 122
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 8a 06 	call	0xd14	; 0xd14 <__udivmodsi4>
 a9c:	21 50       	subi	r18, 0x01	; 1
 a9e:	31 09       	sbc	r19, r1
	UBRRH = (unsigned char)(UBRR>>8);    //Write the higher bits to UBRRH.
 aa0:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)UBRR;         //Write the lowest bits to UBRRL.
 aa2:	29 b9       	out	0x09, r18	; 9
	
	//Enable USART Sender & Receiver.
	SET_BIT (UCSRB, TXEN);               //Enable the Transmitting TX pin.
 aa4:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT (UCSRB, RXEN);               //Enable the Receiving RX pin.
 aa6:	54 9a       	sbi	0x0a, 4	; 10
	UPM(0-1):  @00=Disabled | @10=Even Parity | @11=Odd Parity.
	USBS:      @0=1-bit stop | @1=2-bit stop
	UCSZ(0-2): @000=5-bit word ... @111=9-bit word
	UCPOL:     @0=O/P rising edge | @1= O/P falling edge.
	*/
	UCSRC = (1<<URSEL)|(synchronization<<UMSEL)|(parity_1<<UPM1)|(parity_0<<UPM0)|(stop_bit<<USBS)|(size_0<<UCSZ0)|(size_1<<UCSZ1)|(polarity<<UCPOL);
 aa8:	86 e8       	ldi	r24, 0x86	; 134
 aaa:	80 bd       	out	0x20, r24	; 32
	UCSRB |=  (size_2<<UCSZ2);
 aac:	8a b1       	in	r24, 0x0a	; 10
 aae:	8a b9       	out	0x0a, r24	; 10
	
	//Choosing double speed mode ON/OFF
	#if defined double_on
	SET_BIT (UCSRA, U2X);
	#elif defined double_off
	CLR_BIT (UCSRA, U2X);
 ab0:	59 98       	cbi	0x0b, 1	; 11
 ab2:	08 95       	ret

00000ab4 <UART_send_char>:
//.......................................................

void UART_send_char (char data)
{
	//Wait for UDR transmit buffer to be empty.
	while (0 == READ_BIT(UCSRA, UDRE));
 ab4:	5d 9b       	sbis	0x0b, 5	; 11
 ab6:	fe cf       	rjmp	.-4      	; 0xab4 <UART_send_char>
	
	//Write 'data' to UDR transmit buffer.
	UDR = data;
 ab8:	8c b9       	out	0x0c, r24	; 12
 aba:	08 95       	ret

00000abc <UART_send_string>:
}

//.......................................................

void UART_send_string (char *str)
{
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
 ac0:	ec 01       	movw	r28, r24
	while (*str != 0)
 ac2:	88 81       	ld	r24, Y
 ac4:	88 23       	and	r24, r24
 ac6:	31 f0       	breq	.+12     	; 0xad4 <UART_send_string+0x18>
 ac8:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_send_char(*str);
 aca:	0e 94 5a 05 	call	0xab4	; 0xab4 <UART_send_char>

//.......................................................

void UART_send_string (char *str)
{
	while (*str != 0)
 ace:	89 91       	ld	r24, Y+
 ad0:	81 11       	cpse	r24, r1
 ad2:	fb cf       	rjmp	.-10     	; 0xaca <UART_send_string+0xe>
	{
		UART_send_char(*str);
		str++;
		//_delay_ms(10);     //Wait till the transmit buffer is finished.
	}
}
 ad4:	df 91       	pop	r29
 ad6:	cf 91       	pop	r28
 ad8:	08 95       	ret

00000ada <__fixunssfsi>:
 ada:	70 d0       	rcall	.+224    	; 0xbbc <__fp_splitA>
 adc:	88 f0       	brcs	.+34     	; 0xb00 <__fixunssfsi+0x26>
 ade:	9f 57       	subi	r25, 0x7F	; 127
 ae0:	90 f0       	brcs	.+36     	; 0xb06 <__fixunssfsi+0x2c>
 ae2:	b9 2f       	mov	r27, r25
 ae4:	99 27       	eor	r25, r25
 ae6:	b7 51       	subi	r27, 0x17	; 23
 ae8:	a0 f0       	brcs	.+40     	; 0xb12 <__fixunssfsi+0x38>
 aea:	d1 f0       	breq	.+52     	; 0xb20 <__fixunssfsi+0x46>
 aec:	66 0f       	add	r22, r22
 aee:	77 1f       	adc	r23, r23
 af0:	88 1f       	adc	r24, r24
 af2:	99 1f       	adc	r25, r25
 af4:	1a f0       	brmi	.+6      	; 0xafc <__fixunssfsi+0x22>
 af6:	ba 95       	dec	r27
 af8:	c9 f7       	brne	.-14     	; 0xaec <__fixunssfsi+0x12>
 afa:	12 c0       	rjmp	.+36     	; 0xb20 <__fixunssfsi+0x46>
 afc:	b1 30       	cpi	r27, 0x01	; 1
 afe:	81 f0       	breq	.+32     	; 0xb20 <__fixunssfsi+0x46>
 b00:	77 d0       	rcall	.+238    	; 0xbf0 <__fp_zero>
 b02:	b1 e0       	ldi	r27, 0x01	; 1
 b04:	08 95       	ret
 b06:	74 c0       	rjmp	.+232    	; 0xbf0 <__fp_zero>
 b08:	67 2f       	mov	r22, r23
 b0a:	78 2f       	mov	r23, r24
 b0c:	88 27       	eor	r24, r24
 b0e:	b8 5f       	subi	r27, 0xF8	; 248
 b10:	39 f0       	breq	.+14     	; 0xb20 <__fixunssfsi+0x46>
 b12:	b9 3f       	cpi	r27, 0xF9	; 249
 b14:	cc f3       	brlt	.-14     	; 0xb08 <__fixunssfsi+0x2e>
 b16:	86 95       	lsr	r24
 b18:	77 95       	ror	r23
 b1a:	67 95       	ror	r22
 b1c:	b3 95       	inc	r27
 b1e:	d9 f7       	brne	.-10     	; 0xb16 <__fixunssfsi+0x3c>
 b20:	3e f4       	brtc	.+14     	; 0xb30 <__fixunssfsi+0x56>
 b22:	90 95       	com	r25
 b24:	80 95       	com	r24
 b26:	70 95       	com	r23
 b28:	61 95       	neg	r22
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	8f 4f       	sbci	r24, 0xFF	; 255
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255
 b30:	08 95       	ret

00000b32 <__floatunsisf>:
 b32:	e8 94       	clt
 b34:	09 c0       	rjmp	.+18     	; 0xb48 <__floatsisf+0x12>

00000b36 <__floatsisf>:
 b36:	97 fb       	bst	r25, 7
 b38:	3e f4       	brtc	.+14     	; 0xb48 <__floatsisf+0x12>
 b3a:	90 95       	com	r25
 b3c:	80 95       	com	r24
 b3e:	70 95       	com	r23
 b40:	61 95       	neg	r22
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	99 23       	and	r25, r25
 b4a:	a9 f0       	breq	.+42     	; 0xb76 <__floatsisf+0x40>
 b4c:	f9 2f       	mov	r31, r25
 b4e:	96 e9       	ldi	r25, 0x96	; 150
 b50:	bb 27       	eor	r27, r27
 b52:	93 95       	inc	r25
 b54:	f6 95       	lsr	r31
 b56:	87 95       	ror	r24
 b58:	77 95       	ror	r23
 b5a:	67 95       	ror	r22
 b5c:	b7 95       	ror	r27
 b5e:	f1 11       	cpse	r31, r1
 b60:	f8 cf       	rjmp	.-16     	; 0xb52 <__floatsisf+0x1c>
 b62:	fa f4       	brpl	.+62     	; 0xba2 <__floatsisf+0x6c>
 b64:	bb 0f       	add	r27, r27
 b66:	11 f4       	brne	.+4      	; 0xb6c <__floatsisf+0x36>
 b68:	60 ff       	sbrs	r22, 0
 b6a:	1b c0       	rjmp	.+54     	; 0xba2 <__floatsisf+0x6c>
 b6c:	6f 5f       	subi	r22, 0xFF	; 255
 b6e:	7f 4f       	sbci	r23, 0xFF	; 255
 b70:	8f 4f       	sbci	r24, 0xFF	; 255
 b72:	9f 4f       	sbci	r25, 0xFF	; 255
 b74:	16 c0       	rjmp	.+44     	; 0xba2 <__floatsisf+0x6c>
 b76:	88 23       	and	r24, r24
 b78:	11 f0       	breq	.+4      	; 0xb7e <__floatsisf+0x48>
 b7a:	96 e9       	ldi	r25, 0x96	; 150
 b7c:	11 c0       	rjmp	.+34     	; 0xba0 <__floatsisf+0x6a>
 b7e:	77 23       	and	r23, r23
 b80:	21 f0       	breq	.+8      	; 0xb8a <__floatsisf+0x54>
 b82:	9e e8       	ldi	r25, 0x8E	; 142
 b84:	87 2f       	mov	r24, r23
 b86:	76 2f       	mov	r23, r22
 b88:	05 c0       	rjmp	.+10     	; 0xb94 <__floatsisf+0x5e>
 b8a:	66 23       	and	r22, r22
 b8c:	71 f0       	breq	.+28     	; 0xbaa <__floatsisf+0x74>
 b8e:	96 e8       	ldi	r25, 0x86	; 134
 b90:	86 2f       	mov	r24, r22
 b92:	70 e0       	ldi	r23, 0x00	; 0
 b94:	60 e0       	ldi	r22, 0x00	; 0
 b96:	2a f0       	brmi	.+10     	; 0xba2 <__floatsisf+0x6c>
 b98:	9a 95       	dec	r25
 b9a:	66 0f       	add	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	88 1f       	adc	r24, r24
 ba0:	da f7       	brpl	.-10     	; 0xb98 <__floatsisf+0x62>
 ba2:	88 0f       	add	r24, r24
 ba4:	96 95       	lsr	r25
 ba6:	87 95       	ror	r24
 ba8:	97 f9       	bld	r25, 7
 baa:	08 95       	ret

00000bac <__fp_split3>:
 bac:	57 fd       	sbrc	r21, 7
 bae:	90 58       	subi	r25, 0x80	; 128
 bb0:	44 0f       	add	r20, r20
 bb2:	55 1f       	adc	r21, r21
 bb4:	59 f0       	breq	.+22     	; 0xbcc <__fp_splitA+0x10>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	71 f0       	breq	.+28     	; 0xbd6 <__fp_splitA+0x1a>
 bba:	47 95       	ror	r20

00000bbc <__fp_splitA>:
 bbc:	88 0f       	add	r24, r24
 bbe:	97 fb       	bst	r25, 7
 bc0:	99 1f       	adc	r25, r25
 bc2:	61 f0       	breq	.+24     	; 0xbdc <__fp_splitA+0x20>
 bc4:	9f 3f       	cpi	r25, 0xFF	; 255
 bc6:	79 f0       	breq	.+30     	; 0xbe6 <__fp_splitA+0x2a>
 bc8:	87 95       	ror	r24
 bca:	08 95       	ret
 bcc:	12 16       	cp	r1, r18
 bce:	13 06       	cpc	r1, r19
 bd0:	14 06       	cpc	r1, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	f2 cf       	rjmp	.-28     	; 0xbba <__fp_split3+0xe>
 bd6:	46 95       	lsr	r20
 bd8:	f1 df       	rcall	.-30     	; 0xbbc <__fp_splitA>
 bda:	08 c0       	rjmp	.+16     	; 0xbec <__fp_splitA+0x30>
 bdc:	16 16       	cp	r1, r22
 bde:	17 06       	cpc	r1, r23
 be0:	18 06       	cpc	r1, r24
 be2:	99 1f       	adc	r25, r25
 be4:	f1 cf       	rjmp	.-30     	; 0xbc8 <__fp_splitA+0xc>
 be6:	86 95       	lsr	r24
 be8:	71 05       	cpc	r23, r1
 bea:	61 05       	cpc	r22, r1
 bec:	08 94       	sec
 bee:	08 95       	ret

00000bf0 <__fp_zero>:
 bf0:	e8 94       	clt

00000bf2 <__fp_szero>:
 bf2:	bb 27       	eor	r27, r27
 bf4:	66 27       	eor	r22, r22
 bf6:	77 27       	eor	r23, r23
 bf8:	cb 01       	movw	r24, r22
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <__mulsf3>:
 bfe:	0b d0       	rcall	.+22     	; 0xc16 <__mulsf3x>
 c00:	78 c0       	rjmp	.+240    	; 0xcf2 <__fp_round>
 c02:	69 d0       	rcall	.+210    	; 0xcd6 <__fp_pscA>
 c04:	28 f0       	brcs	.+10     	; 0xc10 <__mulsf3+0x12>
 c06:	6e d0       	rcall	.+220    	; 0xce4 <__fp_pscB>
 c08:	18 f0       	brcs	.+6      	; 0xc10 <__mulsf3+0x12>
 c0a:	95 23       	and	r25, r21
 c0c:	09 f0       	breq	.+2      	; 0xc10 <__mulsf3+0x12>
 c0e:	5a c0       	rjmp	.+180    	; 0xcc4 <__fp_inf>
 c10:	5f c0       	rjmp	.+190    	; 0xcd0 <__fp_nan>
 c12:	11 24       	eor	r1, r1
 c14:	ee cf       	rjmp	.-36     	; 0xbf2 <__fp_szero>

00000c16 <__mulsf3x>:
 c16:	ca df       	rcall	.-108    	; 0xbac <__fp_split3>
 c18:	a0 f3       	brcs	.-24     	; 0xc02 <__mulsf3+0x4>

00000c1a <__mulsf3_pse>:
 c1a:	95 9f       	mul	r25, r21
 c1c:	d1 f3       	breq	.-12     	; 0xc12 <__mulsf3+0x14>
 c1e:	95 0f       	add	r25, r21
 c20:	50 e0       	ldi	r21, 0x00	; 0
 c22:	55 1f       	adc	r21, r21
 c24:	62 9f       	mul	r22, r18
 c26:	f0 01       	movw	r30, r0
 c28:	72 9f       	mul	r23, r18
 c2a:	bb 27       	eor	r27, r27
 c2c:	f0 0d       	add	r31, r0
 c2e:	b1 1d       	adc	r27, r1
 c30:	63 9f       	mul	r22, r19
 c32:	aa 27       	eor	r26, r26
 c34:	f0 0d       	add	r31, r0
 c36:	b1 1d       	adc	r27, r1
 c38:	aa 1f       	adc	r26, r26
 c3a:	64 9f       	mul	r22, r20
 c3c:	66 27       	eor	r22, r22
 c3e:	b0 0d       	add	r27, r0
 c40:	a1 1d       	adc	r26, r1
 c42:	66 1f       	adc	r22, r22
 c44:	82 9f       	mul	r24, r18
 c46:	22 27       	eor	r18, r18
 c48:	b0 0d       	add	r27, r0
 c4a:	a1 1d       	adc	r26, r1
 c4c:	62 1f       	adc	r22, r18
 c4e:	73 9f       	mul	r23, r19
 c50:	b0 0d       	add	r27, r0
 c52:	a1 1d       	adc	r26, r1
 c54:	62 1f       	adc	r22, r18
 c56:	83 9f       	mul	r24, r19
 c58:	a0 0d       	add	r26, r0
 c5a:	61 1d       	adc	r22, r1
 c5c:	22 1f       	adc	r18, r18
 c5e:	74 9f       	mul	r23, r20
 c60:	33 27       	eor	r19, r19
 c62:	a0 0d       	add	r26, r0
 c64:	61 1d       	adc	r22, r1
 c66:	23 1f       	adc	r18, r19
 c68:	84 9f       	mul	r24, r20
 c6a:	60 0d       	add	r22, r0
 c6c:	21 1d       	adc	r18, r1
 c6e:	82 2f       	mov	r24, r18
 c70:	76 2f       	mov	r23, r22
 c72:	6a 2f       	mov	r22, r26
 c74:	11 24       	eor	r1, r1
 c76:	9f 57       	subi	r25, 0x7F	; 127
 c78:	50 40       	sbci	r21, 0x00	; 0
 c7a:	8a f0       	brmi	.+34     	; 0xc9e <__mulsf3_pse+0x84>
 c7c:	e1 f0       	breq	.+56     	; 0xcb6 <__mulsf3_pse+0x9c>
 c7e:	88 23       	and	r24, r24
 c80:	4a f0       	brmi	.+18     	; 0xc94 <__mulsf3_pse+0x7a>
 c82:	ee 0f       	add	r30, r30
 c84:	ff 1f       	adc	r31, r31
 c86:	bb 1f       	adc	r27, r27
 c88:	66 1f       	adc	r22, r22
 c8a:	77 1f       	adc	r23, r23
 c8c:	88 1f       	adc	r24, r24
 c8e:	91 50       	subi	r25, 0x01	; 1
 c90:	50 40       	sbci	r21, 0x00	; 0
 c92:	a9 f7       	brne	.-22     	; 0xc7e <__mulsf3_pse+0x64>
 c94:	9e 3f       	cpi	r25, 0xFE	; 254
 c96:	51 05       	cpc	r21, r1
 c98:	70 f0       	brcs	.+28     	; 0xcb6 <__mulsf3_pse+0x9c>
 c9a:	14 c0       	rjmp	.+40     	; 0xcc4 <__fp_inf>
 c9c:	aa cf       	rjmp	.-172    	; 0xbf2 <__fp_szero>
 c9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ca0:	ec f3       	brlt	.-6      	; 0xc9c <__mulsf3_pse+0x82>
 ca2:	98 3e       	cpi	r25, 0xE8	; 232
 ca4:	dc f3       	brlt	.-10     	; 0xc9c <__mulsf3_pse+0x82>
 ca6:	86 95       	lsr	r24
 ca8:	77 95       	ror	r23
 caa:	67 95       	ror	r22
 cac:	b7 95       	ror	r27
 cae:	f7 95       	ror	r31
 cb0:	e7 95       	ror	r30
 cb2:	9f 5f       	subi	r25, 0xFF	; 255
 cb4:	c1 f7       	brne	.-16     	; 0xca6 <__mulsf3_pse+0x8c>
 cb6:	fe 2b       	or	r31, r30
 cb8:	88 0f       	add	r24, r24
 cba:	91 1d       	adc	r25, r1
 cbc:	96 95       	lsr	r25
 cbe:	87 95       	ror	r24
 cc0:	97 f9       	bld	r25, 7
 cc2:	08 95       	ret

00000cc4 <__fp_inf>:
 cc4:	97 f9       	bld	r25, 7
 cc6:	9f 67       	ori	r25, 0x7F	; 127
 cc8:	80 e8       	ldi	r24, 0x80	; 128
 cca:	70 e0       	ldi	r23, 0x00	; 0
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	08 95       	ret

00000cd0 <__fp_nan>:
 cd0:	9f ef       	ldi	r25, 0xFF	; 255
 cd2:	80 ec       	ldi	r24, 0xC0	; 192
 cd4:	08 95       	ret

00000cd6 <__fp_pscA>:
 cd6:	00 24       	eor	r0, r0
 cd8:	0a 94       	dec	r0
 cda:	16 16       	cp	r1, r22
 cdc:	17 06       	cpc	r1, r23
 cde:	18 06       	cpc	r1, r24
 ce0:	09 06       	cpc	r0, r25
 ce2:	08 95       	ret

00000ce4 <__fp_pscB>:
 ce4:	00 24       	eor	r0, r0
 ce6:	0a 94       	dec	r0
 ce8:	12 16       	cp	r1, r18
 cea:	13 06       	cpc	r1, r19
 cec:	14 06       	cpc	r1, r20
 cee:	05 06       	cpc	r0, r21
 cf0:	08 95       	ret

00000cf2 <__fp_round>:
 cf2:	09 2e       	mov	r0, r25
 cf4:	03 94       	inc	r0
 cf6:	00 0c       	add	r0, r0
 cf8:	11 f4       	brne	.+4      	; 0xcfe <__fp_round+0xc>
 cfa:	88 23       	and	r24, r24
 cfc:	52 f0       	brmi	.+20     	; 0xd12 <__fp_round+0x20>
 cfe:	bb 0f       	add	r27, r27
 d00:	40 f4       	brcc	.+16     	; 0xd12 <__fp_round+0x20>
 d02:	bf 2b       	or	r27, r31
 d04:	11 f4       	brne	.+4      	; 0xd0a <__fp_round+0x18>
 d06:	60 ff       	sbrs	r22, 0
 d08:	04 c0       	rjmp	.+8      	; 0xd12 <__fp_round+0x20>
 d0a:	6f 5f       	subi	r22, 0xFF	; 255
 d0c:	7f 4f       	sbci	r23, 0xFF	; 255
 d0e:	8f 4f       	sbci	r24, 0xFF	; 255
 d10:	9f 4f       	sbci	r25, 0xFF	; 255
 d12:	08 95       	ret

00000d14 <__udivmodsi4>:
 d14:	a1 e2       	ldi	r26, 0x21	; 33
 d16:	1a 2e       	mov	r1, r26
 d18:	aa 1b       	sub	r26, r26
 d1a:	bb 1b       	sub	r27, r27
 d1c:	fd 01       	movw	r30, r26
 d1e:	0d c0       	rjmp	.+26     	; 0xd3a <__udivmodsi4_ep>

00000d20 <__udivmodsi4_loop>:
 d20:	aa 1f       	adc	r26, r26
 d22:	bb 1f       	adc	r27, r27
 d24:	ee 1f       	adc	r30, r30
 d26:	ff 1f       	adc	r31, r31
 d28:	a2 17       	cp	r26, r18
 d2a:	b3 07       	cpc	r27, r19
 d2c:	e4 07       	cpc	r30, r20
 d2e:	f5 07       	cpc	r31, r21
 d30:	20 f0       	brcs	.+8      	; 0xd3a <__udivmodsi4_ep>
 d32:	a2 1b       	sub	r26, r18
 d34:	b3 0b       	sbc	r27, r19
 d36:	e4 0b       	sbc	r30, r20
 d38:	f5 0b       	sbc	r31, r21

00000d3a <__udivmodsi4_ep>:
 d3a:	66 1f       	adc	r22, r22
 d3c:	77 1f       	adc	r23, r23
 d3e:	88 1f       	adc	r24, r24
 d40:	99 1f       	adc	r25, r25
 d42:	1a 94       	dec	r1
 d44:	69 f7       	brne	.-38     	; 0xd20 <__udivmodsi4_loop>
 d46:	60 95       	com	r22
 d48:	70 95       	com	r23
 d4a:	80 95       	com	r24
 d4c:	90 95       	com	r25
 d4e:	9b 01       	movw	r18, r22
 d50:	ac 01       	movw	r20, r24
 d52:	bd 01       	movw	r22, r26
 d54:	cf 01       	movw	r24, r30
 d56:	08 95       	ret

00000d58 <__tablejump2__>:
 d58:	ee 0f       	add	r30, r30
 d5a:	ff 1f       	adc	r31, r31

00000d5c <__tablejump__>:
 d5c:	05 90       	lpm	r0, Z+
 d5e:	f4 91       	lpm	r31, Z
 d60:	e0 2d       	mov	r30, r0
 d62:	09 94       	ijmp

00000d64 <__umulhisi3>:
 d64:	a2 9f       	mul	r26, r18
 d66:	b0 01       	movw	r22, r0
 d68:	b3 9f       	mul	r27, r19
 d6a:	c0 01       	movw	r24, r0
 d6c:	a3 9f       	mul	r26, r19
 d6e:	70 0d       	add	r23, r0
 d70:	81 1d       	adc	r24, r1
 d72:	11 24       	eor	r1, r1
 d74:	91 1d       	adc	r25, r1
 d76:	b2 9f       	mul	r27, r18
 d78:	70 0d       	add	r23, r0
 d7a:	81 1d       	adc	r24, r1
 d7c:	11 24       	eor	r1, r1
 d7e:	91 1d       	adc	r25, r1
 d80:	08 95       	ret

00000d82 <_exit>:
 d82:	f8 94       	cli

00000d84 <__stop_program>:
 d84:	ff cf       	rjmp	.-2      	; 0xd84 <__stop_program>
